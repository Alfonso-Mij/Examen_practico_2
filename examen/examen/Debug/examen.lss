
examen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b4  000001ca  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000081e  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000056d  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000023d  00000000  00000000  00001025  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001af  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009f  00000000  00000000  00001487  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001526  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000162  00000162  00000236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    0000002c  00000136  00000136  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_1 00000040  000000f6  000000f6  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_3 00000042  000000b4  000000b4  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.valores  00000003  00800060  00800060  0000023b  2**0
                  ALLOC
 17 .bss.count    00000001  00800063  00800063  0000023b  2**0
                  ALLOC
 18 .data.f_read  00000001  00800064  00000166  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_1>
   8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_etext>
  10:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  14:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  18:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  1c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  20:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  2c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  34:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  38:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  3c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  40:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  44:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  48:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  4c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  50:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 64       	ori	r16, 0x40	; 64
  58:	80 00       	.word	0x0080	; ????
  5a:	64 00       	.word	0x0064	; ????
  5c:	65 00       	.word	0x0065	; ????
  5e:	01 66       	ori	r16, 0x61	; 97

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d4 e0       	ldi	r29, 0x04	; 4
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	e4 e5       	ldi	r30, 0x54	; 84
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	17 c0       	rjmp	.+46     	; 0xa2 <__do_clear_bss+0x8>
  74:	b5 91       	lpm	r27, Z+
  76:	a5 91       	lpm	r26, Z+
  78:	35 91       	lpm	r19, Z+
  7a:	25 91       	lpm	r18, Z+
  7c:	05 91       	lpm	r16, Z+
  7e:	07 fd       	sbrc	r16, 7
  80:	0c c0       	rjmp	.+24     	; 0x9a <__do_clear_bss>
  82:	95 91       	lpm	r25, Z+
  84:	85 91       	lpm	r24, Z+
  86:	ef 01       	movw	r28, r30
  88:	f9 2f       	mov	r31, r25
  8a:	e8 2f       	mov	r30, r24
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0x20>
  96:	fe 01       	movw	r30, r28
  98:	04 c0       	rjmp	.+8      	; 0xa2 <__do_clear_bss+0x8>

0000009a <__do_clear_bss>:
  9a:	1d 92       	st	X+, r1
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	e1 f7       	brne	.-8      	; 0x9a <__do_clear_bss>
  a2:	e0 36       	cpi	r30, 0x60	; 96
  a4:	f4 07       	cpc	r31, r20
  a6:	31 f7       	brne	.-52     	; 0x74 <__do_copy_data+0x8>
  a8:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  ac:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>

Disassembly of section .text:

00000162 <__bad_interrupt>:
 162:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000136 <main>:

void lectura();

int main(void){
	/*------ Seteo de puertos ------*/ 
	DDRD |= (0 << PD2);						// Switch
 136:	81 b3       	in	r24, 0x11	; 17
 138:	81 bb       	out	0x11, r24	; 17
	DDRD |= (0 << PD3);						// Sensor óptico
 13a:	81 b3       	in	r24, 0x11	; 17
 13c:	81 bb       	out	0x11, r24	; 17
	DDRA = 0b00000000;						// RFID
 13e:	1a ba       	out	0x1a, r1	; 26
	
	DDRB |= (1 << PB3);						// Calefactor (PWM)
 140:	87 b3       	in	r24, 0x17	; 23
 142:	88 60       	ori	r24, 0x08	; 8
 144:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << PB0);						// Electroválvula
 146:	87 b3       	in	r24, 0x17	; 23
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b11111111;					// Display 7 segmentos
 14c:	84 b3       	in	r24, 0x14	; 20
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	84 bb       	out	0x14, r24	; 20
	
	sei();
 152:	78 94       	sei
	
	/*------ Palabras de control ------*/
	//Interrupciones externas 
	GICR = (1 << INT1) | (1 << INT2);
 154:	80 ea       	ldi	r24, 0xA0	; 160
 156:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1 << ISC00) | (1 << ISC11);
 158:	89 e0       	ldi	r24, 0x09	; 9
 15a:	85 bf       	out	0x35, r24	; 53
	
	//Interrupcion Timer
	TIMSK = (1 << OCIE2);
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	89 bf       	out	0x39, r24	; 57
 160:	ff cf       	rjmp	.-2      	; 0x160 <main+0x2a>

Disassembly of section .text.__vector_1:

000000f6 <__vector_1>:
		
    while(1);
}

ISR(INT0_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
	if(f_read == 1){
 102:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <f_read>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	51 f4       	brne	.+20     	; 0x11e <__vector_1+0x28>
		OCR2 = 7;
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	83 bd       	out	0x23, r24	; 35
		TCCR2 = (1 << WGM21) | (1 << CS22) | (1 << CS21) | (1 << CS20);
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	85 bd       	out	0x25, r24	; 37
		f_read--;
 112:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <f_read>
 116:	81 50       	subi	r24, 0x01	; 1
 118:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <f_read>
 11c:	06 c0       	rjmp	.+12     	; 0x12a <__vector_1+0x34>
	} else{
		TCCR2 = 0;
 11e:	15 bc       	out	0x25, r1	; 37
		f_read++;
 120:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <f_read>
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <f_read>
	}	
}
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

Disassembly of section .text.__vector_3:

000000b4 <__vector_3>:

ISR(TIMER2_COMP_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	valores[count] = PORTA;
  c6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <count>
  ca:	e8 2f       	mov	r30, r24
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	9b b3       	in	r25, 0x1b	; 27
  d0:	e0 5a       	subi	r30, 0xA0	; 160
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	90 83       	st	Z, r25
	count++;
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <count>
	if(count == 2) count = 0;	
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	11 f4       	brne	.+4      	; 0xe4 <__vector_3+0x30>
  e0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count>
}
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti
